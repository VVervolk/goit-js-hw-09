{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAaC,SAASC,cAAc,uBACpCC,EAAYF,SAASC,cAAc,sBACnCE,EAAcH,SAASC,cAAc,wBACrCG,EAAkBJ,SAASC,cAAc,UAgB/CG,EAAgBC,iBAAiB,SAAS,SAAAC,GACxCA,EAAGC,iBAEH,IAAIC,EAAaC,OAAOV,EAAWW,OAC/BC,EAAYF,OAAOP,EAAUQ,OAC7BE,EAAcH,OAAON,EAAYO,OAEjCG,EAAU,EACVC,EAAaN,EAEXO,EAAcC,aAAY,WAxBZ,IAACC,EAAUC,GAyB7BL,GAAW,GAEGD,EACZO,cAAcJ,IA5BGE,EAiCLJ,EAjCeK,EA+B7BJ,GAAcH,EA9BT,IAAIS,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACtCC,YAAW,WACTC,QAAQC,IAAIV,GACRK,EACFF,EAAQ,CAAEJ,WAAUC,UAEpBI,EAAO,CAAEL,WAAUC,S,QA0BpBW,MAAK,SAAAC,G,IAAGb,EAAQa,EAARb,SAAUC,EAAKY,EAALZ,MACjBrB,EAAAkC,OAAOC,QAAQ,uBAAwCC,OAAfhB,EAAS,QAAYgB,OAANf,EAAM,M,IAE9DgB,OAAM,SAAAJ,G,IAAGb,EAAQa,EAARb,SAAUC,EAAKY,EAALZ,MAClBrB,EAAAkC,OAAOI,QAAQ,sBAAqCF,OAAfhB,EAAS,QAAYgB,OAANf,EAAM,M,MAE7DJ,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst inputDelay = document.querySelector('input[name=\"delay\"]');\nconst inputStep = document.querySelector('input[name=\"step\"]');\nconst inputAmount = document.querySelector('input[name=\"amount\"]');\nconst buttonForCreate = document.querySelector('button');\n\nconst createPromise = (position, delay) => {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      console.log(delay);\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    });\n  });\n};\n\nbuttonForCreate.addEventListener('click', ev => {\n  ev.preventDefault();\n\n  let delayValue = Number(inputDelay.value);\n  let stepValue = Number(inputStep.value);\n  let amountValue = Number(inputAmount.value);\n\n  let counter = 0;\n  let finalDelay = delayValue;\n\n  const promiseLoop = setInterval(() => {\n    counter += 1;\n\n    if (counter > amountValue) {\n      clearInterval(promiseLoop);\n      return;\n    }\n    finalDelay += stepValue;\n\n    createPromise(counter, finalDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }, finalDelay);\n});\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$inputDelay","document","querySelector","$ce04d3a99e08e73b$var$inputStep","$ce04d3a99e08e73b$var$inputAmount","$ce04d3a99e08e73b$var$buttonForCreate","addEventListener","ev","preventDefault","delayValue","Number","value","stepValue","amountValue","counter","finalDelay","promiseLoop","setInterval","position","delay","clearInterval","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","console","log","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.445f7b87.js.map"}